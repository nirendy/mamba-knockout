[build-system]
requires = ["setuptools>=75.2.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ssm_analysis"
version = "0.1"
description = "SSM Analysis - A fully reproducible environment for SSM analysis research"
requires-python = ">=3.12,<3.13"
dependencies = [
    "pyrallis==0.3.1",
    "submitit==1.5.2",
    "torch==2.5.1",
    "numpy==1.26.4",
    "pandas==2.2.2",
    "scipy==1.14.1",
    "tqdm==4.66.4",
    "transformers==4.50.3",
    "datasets==2.20.0",
    "pydantic==2.8.2",
    "pydantic-extra-types==2.10.2",
    "pydantic-settings==2.7.1",
    "pygwalker==0.4.9.13",
    "plotly==5.24.1",
    "UpSetPlot==0.9.0",
    "cachetools==5.5.0",
    "humanize==4.10.0",
    "seaborn==0.13.2",
    "rich==13.9.4",
    "einops==0.8.0",
    "GitPython==3.1.44",
    "h5py==3.13.0",
    "huggingface-hub==0.26.1",
    "matplotlib==3.9.2",
    "pillow==10.4.0",
    "jsonpickle==4.0.5",
    # mamba-ssm moved to optional dependencies due to CUDA requirement
    "more-itertools==10.7.0",
    "frozendict==2.4.6",
    "devtools==0.12.2",
    "orjson==3.10.15",
    "accelerate==1.1.0",
    "ipykernel>=6.30.0",
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "ruff==0.9.2",
    "setuptools==75.2.0",
    "pytest==8.3.4",
]
streamlit = [
    "streamlit==1.44.1",
    "rich==13.9.4",
    "wfork-streamlit-profiler==1.0.0",
    "streamlit-aggrid==1.1.2",
    "streamlit-antd-components==0.3.2",
    "streamlit-modal==0.1.2",
    "streamlit-pydantic==0.6.0",
    "st-annotated-text==4.0.2",
    "pygwalker==0.4.9.13",
    "streamlit-extras==0.6.0",
    "streamlit-cropper==0.2.2",
]
typing = [
    "mypy==1.11.1",
    "beartype==0.19.0",
    "jaxtyping==0.2.36",
]

# GPU optimization with CUDA kernels and mamba-ssm (Linux x86_64 only)
gpu = [
    "mamba-ssm[causal-conv1d]==2.2.4",
]

# CPU-only mode - analysis and visualization without mamba-ssm
cpu = [
    "mamba-ssm==2.2.4",
]

[tool.uv]
# Override dependencies to prevent CUDA-only packages on non-Linux systems
override-dependencies = [
    "mamba-ssm>=2.2.4; sys_platform == 'linux' and platform_machine == 'x86_64'",
    "causal-conv1d>=1.2.0; sys_platform == 'linux' and platform_machine == 'x86_64'",
]

# Build configuration for problematic packages
no-build-isolation-package = [
    "mamba-ssm",     # Requires torch as build dependency
    "causal-conv1d", # Requires CUDA toolkit at build time
]

# Build constraints to ensure proper build order
build-constraint-dependencies = [
    "torch>=2.5.1",      # Ensure torch is available for mamba-ssm build
    "setuptools>=75.0.0", # Modern setuptools for better build support
    "ninja",              # Build system for CUDA packages
    "packaging",          # Required for version parsing in builds
]

[tool.setuptools.packages.find]
where = ["."]

[tool.ruff]
line-length = 120
target-version = "py312"
extend-include = [
    "src",
    # "app"
    "tests",
]
exclude = [
    "**/*.ipynb.py",
    ".history/**",
    "tests/src/experiments/baselines/full_pipeline/**",
]

[tool.ruff.lint]
select = ["E", "F", "I"]

[tool.ruff.lint.isort]
known-first-party = []

[tool.ruff.lint.per-file-ignores]
# "__init__.py" = ["E402", "F401"]
# "src/models/*.py" = ["E501", "E721", "E741"]
# "src/knockout/**/*.py" = ["E501"]
# "src/readout/*.py" = ["E501", "F841"]
# "src/metrics/matrix/ssm_operator_values_map.py" = ["E721"]
# "src/metrics/matrix/ssm_operator_variances.py" = ["E721"]
# "src/utils/argparse_utils.py" = ["E721", "F811"]
# "src/weight_analysis/model_low_rank_approx.py" = ["E721"]
# "src/weight_analysis/mamba_mixer_context_split.py" = ["E501"]
# "src/knockout/adapted_model/adaptation_evaluator.py" = ["F841"]
# "src/knockout/attention_knockout/mamba_mixer_knockout.py" = ["F841"]
# "src/models/minimal_mamba1.py" = ["F821"]
"src/knockout/attention_knockout/knockout_scan.py" = ["F722"]
# # TODO: fix these
# "scripts/evaluate_tokenization.py" = ["ALL"]
# "scripts/evaluate_interference.py" = ["ALL"]
# "scripts/analyze_ssm.py" = ["ALL"]
# # notebooks
"src/knockout/attention_knockout/mamba_mixer_knockout.py" = [
    "E501", # line too long
    "F841", # Local variable is assigned to but never used
    ]
"src/experiments/knockout/llama/llama_attention_forward.py" = [
    "E501", # line too long
    ]
    
"src/experiments/knockout/llama/sdpa_attention.py" = [
    "E501", # line too long
    ]
    
"notebooks/*.ipynb" = [
    "E501", # line too long
    ]

"src/app/components/model_analysis.py" = ["ALL"] # TODO: fix this

[tool.mypy]
# General settings
python_version = "3.12"
ignore_missing_imports = true # Ignore unresolved imports to avoid excessive errors
show_error_codes = true # Display error codes to identify issues easily

# Type checking behavior
# strict_optional = true # Enforce strict None checking
# disallow_untyped_defs = true # Require types for function definitions
# disallow_incomplete_defs = true # Prevent incomplete type annotations
# disallow_untyped_calls = true # Avoid calling untyped functions
# warn_unused_ignores = true # Warn about ignored errors that aren't necessary
warn_no_return = true # Ensure all functions return a value if expected
warn_redundant_casts = true # Alert on unnecessary type casts
warn_unreachable = true # Highlight unreachable code

# Incremental improvements
check_untyped_defs = true # Perform checks even in untyped functions
# allow_redefinition = false # Prevent redefinition of variables with different types

# Plugin and path settings
# plugins = [] # Add plugins, if applicable
files = [
    "src", 
    "tests", 
    # 'app'
] # Target specific directories for type checking
exclude = [
    ".*/__pycache__",
    ".history/**",
    "tests/src/experiments/baselines/full_pipeline/**",
    # "src/embeddings",
    # "src/evaluate",
    # "src/knockout",
    # "src/metrics",
    # "src/readout",
    # "src/weight_analysis",
    # 'scripts',
    # "src/models/minimal_.*",

    # # TODO: fix these
    # 'src/experiments/info_flow.py',
    # 'src/experiments/info_flow_plot.py',
]

# Error reporting
# pretty = true # Make output more readable


[tool.pyright]
pythonVersion = "3.12"
# Note: Individual users can override these settings locally without changing the repo by:
# 1. Creating a pyrightconfig.json file in the project root (add it to .gitignore)
# 2. Adding their specific venvPath there: { "venvPath": "/path/to/your/venv/parent/dir" }
# venvPath = "."  # This tells Pyright to look for the venv in the current directory
# venv = 'venv'
include = [
    "src",
    "tests",
    "scripts",
    "notebooks",
    # "app/**"
]
exclude = [
    "**/__pycache__",
    ".history/**",
]
ignore = [
    "**/*.ipynb.py",
    "tests/src/experiments/baselines/full_pipeline/**",
    "scripts/**",
    # TODO: Fix this:
    "src/app/components/model_analysis.py",
    "src/experiments/knockout/**/minimal_*",
    "src/experiments/knockout/llama/interfere_hook.py",
    "src/experiments/knockout/llama/sdpa_attention.py",
    "tests/src/test_llama_knockout.py",
    "tests/src/test_llama2_tokenizer.py",
]

reportUnknownMemberType = false
reportMissingImports = false
reportMissingTypeStubs = false
analyzeUnannotatedLibraries = false

executionEnvironments = [
  { root = "." }
]



[tool.pytest.ini_options]
# addopts = "-vv --rich"
addopts = "-vv"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Add custom markers
markers = [
    "baseline_required: marks tests as requiring baseline data",
    "gpu_required: marks tests as requiring GPU",
    "slow: marks tests as slow running",
]
